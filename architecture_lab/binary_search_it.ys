# BEYZA Ã‡APRAZ 
.pos 0x0
init:
    irmovq stack, %rsp
    irmovq $6, %rdx
    irmovq array_begin, %rdi
    irmovq array_end, %rsi
    call binary_search
    halt

#implement your code below (DO NOT CHANGE/REMOVE THIS COMMENT)

binary_search:
    irmovq $-1, %rax
    rrmovq %rdi, %r8
    rrmovq %rsi, %r13  
    subq %rdi, %r13
    jle Done
Loop:
    rrmovq %rsi, %r13
    rrmovq %rdx, %r14 
    irmovq $1, %r10
    irmovq $2, %r9
    irmovq $8, %rbp
    rrmovq %rsi, %rcx
    subq %rdi, %rcx
    dvvq %rbp, %rcx
    dvvq %r9, %rcx
    mllq %rbp, %rcx
    addq %rdi, %rcx #mid calculation
    rrmovq %rcx, %r12
    subq %r8, %r12
    dvvq %rbp, %r12
    addq %r10, %r12 # mid - initial + 1
    mrmovq (%rcx), %r9 
    subq %r9, %r14 # mid == value
    cmove %r12, %rax
    je Done
    rrmovq %rdx, %r14
    rrmovq %rcx, %r11
    addq %rbp, %r11 # mid + 1
    mrmovq (%rcx), %r9 
    subq %r9, %r14 # mid < value
    cmovg %r11, %rdi 
    cmovle %rcx, %rsi
    subq %rdi, %r13
    jg Loop
Done:
    ret

#implement your code above (DO NOT CHANGE/REMOVE THIS COMMENT)

.pos 0x1008
array_begin:
    .quad 1
    .quad 2
    .quad 3
    .quad 5
    .quad 6
    .quad 7
    .quad 9
    .quad 11
array_end:
    .quad 0
.pos 0x1F00
stack:
    .quad 0


