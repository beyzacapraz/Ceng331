# BEYZA Ã‡APRAZ
.pos 0x0
init:
    irmovq stack, %rsp
    irmovq array_begin1, %rdi
    irmovq array_end1, %rsi
    irmovq array_begin2, %rdx
    irmovq array_end2, %rcx
    irmovq array_begin3, %r8
    call merge
    halt

#implement your code below (DO NOT CHANGE/REMOVE THIS COMMENT)

merge:
    irmovq $8, %r9
    rrmovq %rsi, %r10 # end1 copy
    rrmovq %rcx, %r11 # end2 copy
    rrmovq %rdx, %r12 # begin2 copy
    subq %rdi, %r10 # end1 > begin1
    jg loop
    jle loop3
    
loop:
    rrmovq %rcx, %r11 # end2 copy
    subq %rdx, %r11 # end2 > begin 2
    jg if 
    jle loop2

loop2:
    rrmovq %rsi, %r10 # end1 copy
    subq %rdi, %r10 # end1 > begin1
    jg do3
    jle loop3

loop3:
    rrmovq %rcx, %r11 # end2 copy
    subq %rdx, %r11 # end2 > begin2
    jg do4
    ret


if:
    mrmovq (%r12), %r12 #*begin2
    rrmovq %rdi, %r13 #begin1
    mrmovq (%r13), %r13 #*begin1
    subq %r13, %r12 # *begin2 > *begin1
    jg do1 
    jle do2

do1:
    mrmovq (%rdi), %r14 #*begin3
    rmmovq %r14, (%r8)
    addq %r9, %r8 #*begin3++
    addq %r9, %rdi #*begin1++
    jmp merge
do2:
    mrmovq (%rdx), %r14 #*begin3
    rmmovq %r14, (%r8)
    addq %r9, %r8 # begin3++ 
    addq %r9, %rdx # begin2++
    jmp merge
do3:
    mrmovq (%rdi), %r14 #*begin3
    rmmovq %r14, (%r8)
    addq %r9, %r8 #*begin3++
    addq %r9, %rdi #*begin1++
    jmp loop2
do4:
    mrmovq (%rdx), %r14 #*begin3
    rmmovq %r14, (%r8)
    addq %r9, %r8 # begin3++ 
    addq %r9, %rdx # begin2++
    jmp loop3

#implement your code above (DO NOT CHANGE/REMOVE THIS COMMENT)

.pos 0x1008
array_begin1:
    .quad 1
    .quad 2
    .quad 3
    .quad 5
    .quad 17
    .quad 18
    .quad 19
    .quad 110
array_end1:
    .quad 0
array_begin2:
    .quad 10
    .quad 11
    .quad 12
    .quad 200
    .quad 201
    .quad 202
    .quad 203
    .quad 204
array_end2:
    .quad 0
.pos 0x1500
array_begin3:
    .quad 0
.pos 0x1F00
stack:
    .quad 0


